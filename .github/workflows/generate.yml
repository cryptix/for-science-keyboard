# SPDX-FileCopyrightText: 2021 Robin Vobruba <hoijui.quaero@gmail.com>
#
# SPDX-License-Identifier: CC0-1.0

name: CI

# Controls when the action will run.
# Triggers the workflow on push or pull request events,
# but only for the master branch.
on:
  push:
    paths:
      - '.github/workflows/generate.yml'
      - '**.sch'
      - '**.kicad_pcb'
      - '**.kibot.yaml'
      - 'Makefile'
  pull_request:
    paths:
      - '.github/workflows/generate.yml'
      - '**.sch'
      - '**.kicad_pcb'
      - '**.kibot.yaml'
      - 'Makefile'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  inject:
    runs-on: ubuntu-latest
    container: setsoft/kicad_auto:latest
    steps:
    - name: Install deps
      run: |
        apt-get update
        apt-get install -qq git wget python3-pip ttf-mscorefonts-installer libffi-dev qrencode
        fc-cache -f -v
    - uses: actions/checkout@v2
    - name: Preparations
      run: |
        SRC_GEN_DIR=build/src-gen
        echo "SRC_GEN_DIR=$SRC_GEN_DIR" >> "$GITHUB_ENV"

        # Create all the ancestor dirs
        mkdir -p "$SRC_GEN_DIR"
        rmdir "$SRC_GEN_DIR"

        # Copy the whole repo, so we can modify files in there
        #git workdir add "$SRC_GEN_DIR"
        git clone . "$SRC_GEN_DIR"
    - name: Fetch projvar
      run: |
        cd build
        wget https://github.com/hoijui/projvar/releases/download/0.4.2/projvar-0.4.2-x86_64-unknown-linux-musl.tar.gz
        tar xzf *projvar*.tar.gz
        mv *projvar*/projvar ./
        cd ..
    - name: Fetch KiCad-text-injector
      run: |
        cd build
        wget https://github.com/hoijui/kicad-text-injector/releases/download/0.2.4/kicad-text-injector-0.2.4-x86_64-unknown-linux-musl.tar.gz
        tar xzf *kicad-text-injector*.tar.gz
        mv *kicad-text-injector*/kicad-text-injector ./
        cd ..
    - name: Fetch KiCad-image-injector
      run: |
        cd build
        git clone https://github.com/hoijui/kicad-image-injector.git
        pip3 install -r kicad-image-injector/requirements.txt
        cd ..
    - name: Gather meta-data (using projvar)
      run: |
        # Gathers the project meta-data and stores it in projvar.env
        build/projvar \
          -O build/projvar.env \
          --log-level Trace \
          --fail \
          -N License \
          --show-all-retrieved \
          -DPROJECT_VERSION="$(git describe --tags --dirty --broken --always --candidates=99 --first-parent)" # TODO HACK Remove this line when this issue is resolved: https://github.com/hoijui/projvar/issues/5
    - name: Generate QR-Code containing meta-data (using qrencode)
      run: |
        cd build
        {
          # This makes sure that when loading variables from the vile below, they are exported
          set -a
          # Loads the projects meta-data
          . projvar.env
          set +a
          echo "project-name: $PROJECT_NAME"
          # TODO Add more echos
        } > qr-data.txt
        qrencode --size 1 --margin 0 --output qr.png --read-from qr-data.txt
        cd ..
    - name: Inject text and images into PCBs
      run: |
        pwd
          set -a
        . build/projvar.env
          set +a
        # Loop through all the git-tracked KiCad PCB files
        for kicad_pcb in $(git ls-tree -r HEAD --name-only | grep ".kicad_pcb\$")
        do
          kicad_pcb_inj_text="$SRC_GEN_DIR/TEXT_INJECTED_$kicad_pcb"
          kicad_pcb_final="$SRC_GEN_DIR/$kicad_pcb"
          kicad_pcb_images_list_file="${kicad_pcb}.images_to_inject.txt"
          build/kicad-text-injector \
            --input "$kicad_pcb" \
            --output "$kicad_pcb_inj_text" \
            --env
          #if [ -f "$kicad_pcb_images_list_file" ]
          if [ "$kicad_pcb" = "base.kicad_pcb" ] # HACK Replace by the previous line
          then
            {
              echo "build/qr.png"
              echo "build/qr.png"
              echo "build/qr.png"
              echo "build/qr.png"
              echo "build/qr.png"
            } > "$kicad_pcb_images_list_file" # HACK This needs to be present already or be otherwise generated
            python3 build/kicad-image-injector/placeholder2image.py \
              --input "$kicad_pcb_inj_text" \
              --output "$kicad_pcb_final" \
              --repl-idents-list-file "$kicad_pcb_images_list_file"
          else
            mv "$kicad_pcb_inj_text" "$kicad_pcb_final"
          fi
        done

  # ERC:
  #   runs-on: ubuntu-latest
  #   container: setsoft/kicad_auto:latest
  #   needs: inject

  #   steps:
  #   - uses: actions/checkout@v2

    - name: Run ERC
      run: |
        cd ${{ env.SRC_GEN_DIR }}
        make erc
        cd ../..

    # - name: Retrieve ERC results
    #   uses: actions/upload-artifact@v1
    #   with:
    #     name: ERC_Output
    #     path: ${{ env.SRC_GEN_DIR }}

  # DRC:
  #   runs-on: ubuntu-latest
  #   container: setsoft/kicad_auto:latest
  #   needs: ERC

  #   steps:
  #   - uses: actions/checkout@v2

    - name: Run DRC
      run: |
        cd ${{ env.SRC_GEN_DIR }}
        make drc
        cd ../..

    # - name: Retrieve DRC results
    #   uses: actions/upload-artifact@v1
    #   with:
    #     name: DRC_Output
    #     path: ${{ env.SRC_GEN_DIR }}

  # FabSch:
  #   name: Schematic fabrication files
  #   runs-on: ubuntu-latest
  #   container: setsoft/kicad_auto:latest
  #   needs: ERC

  #   steps:
  #   - uses: actions/checkout@v2

    - name: Run schematic stuff
      run: |
        cd ${{ env.SRC_GEN_DIR }}
        make sch_fab
        cd ../..

    # - name: Retrieve FabSch results
    #   uses: actions/upload-artifact@v1
    #   with:
    #     name: FabSch_Output
    #     path: ${{ env.SRC_GEN_DIR }}

  # FabPCB:
  #   name: PCB fabrication files
  #   runs-on: ubuntu-latest
  #   container: setsoft/kicad_auto:latest
  #   needs: DRC

  #   steps:
  #   - uses: actions/checkout@v2

    - name: Run PCB stuff
      run: |
        cd ${{ env.SRC_GEN_DIR }}
        make pcb_fab
        cd ../..

    # - name: Retrieve FabPCB results
    #   uses: actions/upload-artifact@v1
    #   with:
    #     name: FabPCB_Output
    #     path: ${{ env.SRC_GEN_DIR }}

    - name: Change artifact permissions
      run: |
        chmod -R a+r ${{ env.SRC_GEN_DIR }}

    - name: Upload all generated things
      uses: actions/upload-artifact@v1
      with:
        name: Generated source and outputs
        path: ${{ env.SRC_GEN_DIR }}
